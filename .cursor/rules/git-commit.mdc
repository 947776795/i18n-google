---
description: commit
globs: 
alwaysApply: false
---
# 工作流程提示词

## 1. Review 变更

```
请仔细审查当前代码库中的所有变更：
- 检查新增、修改和删除的文件
- 分析变更的功能影响和范围
- 评估变更的质量和完整性
- 识别可能的风险点和需要注意的地方
- 总结变更的核心内容和目的

请提供详细的变更分析报告，包括：
1. 变更文件清单
2. 主要功能变更描述
3. 影响范围评估
4. 潜在风险点
```

## 2. 向用户索取关键信息

```
基于代码变更分析，请向用户收集以下关键信息：

必需信息：
- 本次变更的主要目的和背景
- 新功能的详细描述
- 是否有破坏性变更（Breaking Changes）
- 目标用户群体
- 预期的影响范围

可选信息：
- 性能改进的具体数据
- 新增依赖的说明
- 迁移指南需求
- 特殊配置要求

请以清晰的问题形式向用户询问这些信息，确保获得完整准确的项目更新信息。
```

## 3. 根据变更更新 README.md

```
基于代码变更和用户提供的信息，请更新 README.md 文件：

更新内容包括：
- 新功能的使用说明和示例
- 安装和配置指南的更新
- API 文档的修改
- 示例代码的更新
- 依赖项的变更说明
- 使用注意事项

更新原则：
- 保持文档结构清晰
- 提供完整的代码示例
- 确保信息准确性
- 考虑不同用户的使用场景
- 保持与现有文档风格一致

请生成更新后的 README.md 内容。
```

## 4. 更新版本号

```
请根据代码变更的性质确定合适的版本号更新策略：

语义化版本规则（Semantic Versioning）：
- MAJOR (主版本): 不兼容的 API 变更
- MINOR (次版本): 向下兼容的功能新增
- PATCH (修订版本): 向下兼容的 bug 修复

分析步骤：
1. 识别变更类型（新功能/修复/破坏性变更）
2. 确定版本号变更级别
3. 更新相关配置文件中的版本号
4. 检查依赖项版本是否需要更新

请提供版本号更新建议和需要修改的文件清单。
```

## 5. 生成变更的 commit msg

```
基于代码变更和收集的信息，生成规范的 commit 消息：

Commit 消息格式：
```

<type>(<scope>): <subject>

<body>

<footer>
```

类型（type）：

- feat: 新功能
- fix: 修复 bug
- docs: 文档更新
- style: 格式调整
- refactor: 重构
- test: 测试相关
- chore: 构建/工具相关

要求：

- subject 不超过 50 字符
- body 详细描述变更内容和原因
- footer 包含 breaking changes 和 issue 引用
- 使用祈使语气
- 中英文皆可，保持项目一致性

请生成完整的 commit 消息。

```

## 6. 提交代码
```

执行最终的代码提交流程：

提交前检查：

- 确认所有文件已正确暂存
- 验证代码格式和质量
- 运行测试确保无错误
- 检查 commit 消息格式

提交步骤：

1. git add . (或指定文件)
2. git commit -m "generated_commit_message"
3. git push origin [branch_name]

后续操作：

- 创建 Pull Request（如需要）
- 通知相关团队成员
- 更新项目看板或任务状态
- 准备发布说明（如适用）

请确认是否执行提交操作，并提供具体的 git 命令。

```

## 使用说明

这套提示词适用于标准的代码变更发布流程，可以根据具体项目需求进行调整：

1. 按顺序执行每个步骤
2. 根据项目特点调整提示词内容
3. 可以合并或拆分某些步骤
4. 建议保存为模板供后续使用
```
